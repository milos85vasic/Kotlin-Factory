ext.alpha = 1
ext.versionNumber = 1
ext.secondaryVersion = 0
ext.tertiaryVersion = 0

buildscript {
    ext.kotlin_version = '1.0.6'
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies.classpath "com.android.tools.build:gradle:2.1.0"
    dependencies.classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    dependencies.classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

apply plugin: "java"
apply plugin: "kotlin"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    compile "junit:junit:4.12"
    testCompile "junit:junit:4.12"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

sourceSets.main.kotlin.srcDirs += 'src/main/kotlin'
sourceSets.main.kotlin.srcDirs += 'build/generated-src/kotlin'

version = String.format("%d.%d.%d", ext.versionNumber, ext.secondaryVersion, ext.tertiaryVersion)
if (alpha > 0) {
    version += "_Alpha_${ext.alpha}"
}
jar.archiveName = project.name + "_V" + version + ".jar"

ext.generateSources = {
    versionPackage, packageStructure ->
        final destination = new File(
                "${System.getProperty("user.dir")}${File.separator}${project.name}${File.separator}build${File.separator}generated-src${File.separator}kotlin${File.separator}${packageStructure}"
        )
        println("We are about to generate sources [ ${destination.absolutePath} ]")
        if (destination.exists() || destination.mkdirs()) {
            final classFile = new File(
                    "$destination${File.separator}Version.kt"
            )
            classFile.write("package ${versionPackage} data class Version(val VERSION : String = \"$version\")")
            println("We generated file [ ${classFile.absolutePath} ]")
        } else {
            println("Couldn't initialize [ ${destination.absolutePath} ]")
        }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    archiveName = project.name + "_V" + version + "_Sources.jar"
}

artifacts {
    archives sourcesJar
}